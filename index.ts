import * as fs from "fs";
import * as csv from "csv";
import moment, { Moment } from "moment";
import { glob } from "node:fs/promises";

const template = `
[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720


[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H8000FFF7,&H000000FF,&H7B000000,&HFF000000,0,0,0,0,100,100,0,0,1,4.5,4.5,1,23,23,90,1
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text`;

const maxLines = 16;
async function main() {
  let chat: Array<{
    username: string;
    message: string;
    icon: string;
    time: Moment;
  }> = [];
  let vids: Array<{
    url: string;
    title: string;
    time: Moment;
    duration: number;
  }> = [];
  let days: Record<string, number> = {};
  for await (const entry of glob("./input/CHAT/*")) {
    chat = chat.concat(await processChat(entry));
  }
  for await (const entry of glob("./input/PLAYLIST/*")) {
    vids = await processVid(entry);
  }
  let day = 0;
  chat.sort((a, b) => {
    return a.time.unix() - b.time.unix();
  });
  console.log("sorted", chat[0], chat[chat.length - 1]);
  for (let i = 0; i < chat.length; i++) {
    const msg = chat[i];
    let cDay = msg.time.date();
    if (day !== cDay) {
      days[cDay] = i;
    }
    day = cDay;
  }
  days[day + 1] = chat.length;
  for (let i = 0; i < vids.length - 1; i++) {
    const vid = vids[i];
    const vidStart = vid.time;
    const vidLength = vid.duration;
    const vidEnd = vidStart.clone().add(vidLength, "seconds");
    if (vidLength < 300) continue;
    let currentChat: string[] = [];
    let subtitles = template;
    let lastTime = 0;
    let day = vid.time.date();

    for (let j = days[day]; j <= days[day + 1]; j++) {
      const msg = chat[j];
      if (msg.time >= vidStart && msg.time <= vidEnd) {
        let time = msg.time.diff(vidStart) / 1000;
        if (Math.floor(time) == Math.floor(lastTime)) {
          do {
            time += 0.05;
          } while (time <= lastTime);
        }
        for (const j in currentChat) {
          let msg = currentChat[j];
          let last = "";
          do {
            last = msg;
            msg = msg.replace(/<span [^>]*>/gm, "");
            msg = msg.replace(`</span>`, "");
            msg = msg.replace(/&gt;/gm, ">");
            msg = msg.replace(/&lt;/gm, "<");
            msg = msg.replace(/<strong>/gm, ">");
            msg = msg.replace(/<\/strong>/gm, ">");
          } while (last !== msg);

          subtitles += `
Dialogue: 0,${formatTime(lastTime)},${formatTime(time)},Default,,0,0,${
            (parseInt(j) + 15) * 10
          },,${msg}`;
        }
        currentChat.unshift(msg.username + ": " + msg.message);
        currentChat.splice(maxLines);
        lastTime = time;
      }
    }
    const time = vidLength;
    for (const j in currentChat) {
      subtitles += `
Dialogue: 0,${formatTime(lastTime)},${formatTime(time)},Default,,0,0,${
        (parseInt(j) + 15) * 10
      },,${currentChat[j]}`;
    }
    let parsedTitle = vid.title.replace(/[\\/:"*?<>|]+/gm, "");
    fs.writeFileSync(`./output/${parsedTitle}.ass`, subtitles);
  }
}

main();
function formatTime(seconds: number) {
  let milliseconds = Math.round((seconds - Math.floor(seconds)) * 100);
  return `${Math.floor(seconds / 3600)}:${Math.floor(seconds / 60)
    .toString()
    .padStart(2, "0")}:${(Math.floor(seconds) % 60)
    .toString()
    .padStart(2, "0")}.${milliseconds}`;
}
async function processChat(file: string) {
  const records: Array<{
    username: string;
    message: string;
    icon: string;
    time: Moment;
  }> = [];
  const parser = fs.createReadStream(file).pipe(
    csv.parse({
      // CSV options if any
    })
  );
  for await (const record of parser) {
    // Work with each record
    let time = moment.unix(record[0] / 1000).add(-30, "seconds");
    if (time.unix() > 1000)
      records.push({
        username: record[1],
        message: record[2],
        icon: record[3],
        time,
      });
  }
  return records;
}

async function processVid(file: string) {
  const records: Array<{
    url: string;
    title: string;
    time: Moment;
    duration: number;
  }> = [];
  const parser = fs.createReadStream(file).pipe(
    csv.parse({
      // CSV options if any
    })
  );
  for await (const record of parser) {
    // Work with each record
    let duration = parseInt(record[3]);
    if (duration > 1200)
      records.push({
        url: record[5],
        title: record[1],
        time: moment.unix(record[0] / 1000),
        duration,
      });
  }
  return records;
}
